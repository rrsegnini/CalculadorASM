
;%include "io.mac"

;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro	checkFloat 1
	mov 	CX, 263
	mov	EDX, 1
	mov 	EAX, 0
	
check:
	mov 	AL, byte[%1 + EDX]
	cmp	AL, '.'
	je	TRUE
	inc	EDX
	loop	check
	jmp	FALSE
TRUE:
	mov	EAX, 'True'
	jmp	SALIR
FALSE:
	jmp	SALIR
	
SALIR:
	nwln
	
%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------

%macro	bF_dF 	2	;Binary in floating point to decimal
	mov 	CX, 263
	mov	EDX, 0
	mov 	EAX, 0
	mov	EBX, 0	;RESULTADO
	mov	dword[frac], 0	;RESULTADO FRACCIONARIO
		
recorrer:
	;PutLInt	dword[frac]
	mov 	AL, byte[%1 + EDX]

	cmp	AL, '.'		;SALIR SI LLEGA AL FINAL DEL STRING
	je	bF_dF_frac

	sub	AL, '0'
	nwln
	

	call	pow
	
	;PutLInt	EBX
	;nwln

	inc	EDX
	loop	recorrer
	jmp	bF_dF_salir
	

pow:
	push	CX
	push	EDX


	cmp	EDX, 0
	je	pow_primero


	;PutLInt	EDX

	
	cmp	AL, 1
	je	Uno
	jmp	Cero

Uno:
	shl	EBX, 1
	add	EBX, EAX

	pop 	EDX
	pop	CX
	jmp	pow_salir

pow_primero:
	inc 	EDX
	cmp	AL, 1
	je	Uno

Cero:


	
	shl	EBX, 1

	pop	EDX
	pop	CX

	
pow_salir:
	ret
	


bF_dF_frac:
	mov	SI, 1
	;PutInt	SI
	;push	S
bF_dF_frac_2:

	inc	EDX
	push	EDX
	;PutLInt	EDX
	;nwln
	mov	EAX, 0
	mov 	AL, byte[%1 + EDX]
	;PutCh	AL
	;nwln
	cmp	AL, 0		;SALIR SI LLEGA AL FINAL DEL STRING
	je	bF_dF_salir
	
	
	cmp	AL, '1'
	je	Uno_frac
	cmp	AL, '0'
	je	Cero_frac
	jmp	Frac_loop

Uno_frac:
	
	mov	EAX, 5
	mul	SI
	;PutInt	SI
	;nwln
	mov	SI, AX

	;PutInt	SI
	;nwln	
	add	word[%2], SI
	;PutLInt	%2
	;mov	dword[%2], EAX

;jmp	bF_dF_salir

	jmp	Frac_loop
	
Cero_frac:
	mov	EAX, 5
	mul	SI
	mov	SI, AX
	;PutInt	AX
	;nwln
Frac_loop:
	pop	EDX
	loop	bF_dF_frac_2
		
		 
bF_dF_salir:
	nwln	
	
%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------

%macro	b_h	1	;number
	mov 	CX, 263
	mov	EDX, 1 
	mov 	EAX, 0
	mov	EBX, 0
read_str:
	mov	EAX, dword[%1 + EDX]
	;mov	[digit], EAX
	;PutStr	digit
	cmp	EAX, 0
	je	SALIR

	cmp 	EAX, '1010'
	je	A
	cmp	EAX, '1011'
	je	B
	cmp	EAX, '1100'
	je	C
	cmp	EAX, '1101'
	je	D
	cmp	EAX, '1110'
	je	E
	cmp	EAX, '1111'
	je	F
	;jmp	read_str2

	jmp	de0_9

read_str2:
	loop 	read_str
	jmp	SALIR
	 

de0_9:
	sub	EAX, 185
	jmp	read_str2
	;PutLInt	EAX
		


A:
	PutCh 	'A'
	add	EDX, 4
	jmp 	read_str2
B:
	PutCh 	'B'
	add	EDX, 4
	jmp 	read_str2
C:
	PutCh 	'C'
	add	EDX, 4
	jmp 	read_str2
D:
	PutCh 	'D'
	add	EDX, 4
	jmp 	read_str2
E:
	PutCh 	'E'
	add	EDX, 4
	jmp 	read_str2
F:
	PutCh 	'F'
	add	EDX, 4
	jmp 	read_str2


SALIR:
	nwln
	;ret
	


%endmacro



;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro	powOchoASCII 1

	pushfd	;Conservar el estado de todos los registros de 32bits
	

	mov	BH, %1
	
	cmp	BH, 0
	je	%%pow_cero
	cmp	BH, 1
	je	%%pow_uno

%%vaciar_potencia:
	mov	ECX, 0
%%vaciar_potencia_2:
	
	
	mov	byte[potencia+ECX],  '0'
	mov	byte[ocho1+ECX], '0'
	mov	byte[ocho2+ECX], '0'


	inc	CX
	cmp	CX, 10
	je	%%salir_vaciar_potencia
	jmp	%%vaciar_potencia_2
%%salir_vaciar_potencia:
	mov	byte[ocho1+9], '8'
	mov	byte[ocho2+9], '8'

%%sum_loop_1:
	mov	BL, 8
%%sum_loop:
	mov	ESI, 9
	mov	ECX, 10
	clc
%%add_loop:
	mov	AL, [ocho1+ESI]
	adc	AL, [ocho2+ESI]
	aaa
	pushf
	or	AL, 30h
	popf
	mov	[potencia+ESI], AL
	dec	ESI
	loop	%%add_loop
	
	

	cmp	BL, 2
	je	%%Repetir
	dec	BL
	
	
;nwln
	mov	ECX, 0
	push	EDX
%%mover_operando:
	
	
	
	mov	DL, byte[potencia+ECX]
	mov	byte[potencia+ECX],  '0'
	;PutCh	DL
	;nwln
	mov	byte[ocho1+ECX], DL
	;sub	[potencia], ECX
	
	;PutStr	number1
	;nwln
	inc	CX
	cmp	CX, 10
	je	%%salir_mover_operandos
	jmp	%%mover_operando

%%salir_mover_operandos:
	pop 	EDX
	jmp	%%sum_loop




	
%%Repetir:
	
	cmp	BH, 2
	je	%%SALIR_pow
	dec	BH
	mov	ECX, 0
	push	EDX
%%mover_operandos_2:

	
	mov	DL, byte[potencia+ECX]
	mov	byte[potencia+ECX],  '0'
	mov	byte[ocho1+ECX], DL
	mov	byte[ocho2+ECX], DL

	
	inc	CX
	cmp	CX, 10
	je	%%salir_mover_operandos_2
	jmp	%%mover_operandos_2

%%salir_mover_operandos_2:
	pop EDX
	jmp	%%sum_loop_1


%%pow_cero:
	mov	byte[potencia + 9], '1'
	jmp 	%%SALIR_pow

%%pow_uno:
	mov	ECX, 0
	;push	EDX
%%pow_uno_1:
	
	;mov	DL, byte[potencia+ECX]
	mov	byte[potencia+ECX],  '0'
	;mov	byte[ocho1+ECX], DL
	;mov	byte[ocho2+ECX], DL


	inc	CX
	cmp	CX, 10
	je	%%salir_pow_uno
	jmp	%%pow_uno_1

%%salir_pow_uno:
	;pop EDX
	;PutStr	sum_msg
	mov	byte[potencia + 9], '8'
	

%%SALIR_pow:
	popfd
%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro stringToInt 1

%%reading:
     sub     EAX, EAX
     mov     EBX, %1
     
%%cond:   
     mov     DX, 10
     cmp     byte[EBX], 0
     je      %%question
     
   
     sub     byte[EBX], '0'
     mul     EDX
     sub     ECX, ECX
     mov     CL, byte[EBX]
     add     EAX, ECX
     inc     EBX 
     jmp     %%cond

%%question:
     ;PutLInt EAX
     ;nwln
 
     jmp %%done


%%done:
     


%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro	mulASCII 2

	;pushfd	;Conservar el estado de todos los registros de 32bits
	
	mov	EBX, %2
	cmp	EBX, 1
	je	%%Uno_mul

	cmp	EBX, 0
	je	%%SALIR_mul_2
	
	mov	ECX, 0
%%copiar_num_mul:
	;push	EDX
	mov	DL, byte[%1+ECX]
	mov	byte[number2+ECX], DL
	mov	byte[sum+ECX],  '0'
	inc	CX
	cmp	CX, 10
	je	%%sum_loop_mul
	jmp	%%copiar_num_mul



%%sum_loop_mul:
	mov	ESI, 9
	mov	ECX, 10
	clc
%%add_loop_mul:
	mov	AL, [%1+ESI]
	adc	AL, [number2+ESI]
	aaa
	pushf
	or	AL, 30h
	popf
	mov	[sum+ESI], AL
	dec	ESI
	loop	%%add_loop_mul
	 
	;PutStr	sum_msg
	;PutStr	sum
	;nwln
	

	cmp	EBX, 2
	je	%%SALIR_mul
	dec	EBX
	
	;nwln
	mov	ECX, 0
%%mover_operando_mul:
	
	
	;push	EDX
	mov	DL, byte[sum+ECX]
	mov	byte[sum+ECX],  '0'
	mov	byte[%1+ECX], DL
	
	
	;PutStr	number1
	;nwln
	inc	CX
	cmp	CX, 10
	je	%%salir_mover_operandos_mul
	jmp	%%mover_operando_mul

%%salir_mover_operandos_mul:
	jmp	%%sum_loop_mul


%%Uno_mul:
	mov	ECX, 0
%%Uno_mul_2:	
	
	mov	DL, byte[%1+ECX]
	mov	byte[sum+ECX], DL
	
	inc	CX
	cmp	CX, 10
	je	%%SALIR_mul
	jmp	%%Uno_mul_2
	


%%SALIR_mul:
	mov	ECX, 0
	;PutStr	sum_msg
	;PutStr	sum
	;nwln
%%SALIR_mul_1:
	
	
	;mov	DL, byte[sum+ECX]
	;mov	byte[sum+ECX],  '0'
	mov	byte[%1+ECX],  '0'
	;mov	byte[total+ECX], DL
	
	inc	CX
	cmp	CX, 10
	je	%%SALIR_mul_2
	jmp	%%SALIR_mul_1
	
%%SALIR_mul_2:

	
%endmacro


;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro	addASCII 2
	pushfd	;Conservar el estado de todos los registros de 32bits
	
	mov	ESI, 9
	mov	ECX, 10
	clc

%%add_loop_add:
	;sub	AH, AH
	mov	AL, [%1+ESI]
	adc	AL, [%2+ESI]
	aaa
	pushf
	or	AL, 30h
	popf
	mov	[total+ESI], AL
	dec	ESI
	loop	%%add_loop_add
	

	


%%SALIR:
	popfd

%endmacro


;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro	prioridades 2

DP:				;Dentro de la pila
	cmp	%1, '('
	je	parentesisDP
	cmp	%1, '+'
	je	masDP
	cmp	%1, '-'
	je	menosDP
	cmp	%1, '*'
	je	porDP
	cmp	%1, '/'
	je	divisionDP
	cmp	%1, '^'
	je	powDP
	jmp	ERROR_prioridades

FP:				;Fuera de la pila
	cmp	%2, '('
	je	parentesisFP
	cmp	%2, '+'
	je	masFP
	cmp	%2, '-'
	je	menosFP
	cmp	%2, '*'
	je	porFP
	cmp	%2, '/'
	je	divisionFP
	cmp	%2, '^'
	je	powFP
	jmp	ERROR_prioridades

parentesisDP:
	mov	byte[PDP ], 0
	jmp	FP
masDP:
	mov	byte[PDP], 1
	jmp	FP
menosDP:
	mov	byte[PDP], 1
	jmp	FP
porDP:
	mov	byte[PDP], 2
	jmp	FP
divisionDP:
	mov	byte[PDP], 2
	jmp	FP
powDP:
	mov	byte[PDP], 3
	jmp	FP


parentesisFP:
	mov	byte[PFP], 0
	jmp	compare
masFP:
	mov	byte[PFP], 1
	jmp	compare
menosFP:
	mov	byte[PFP], 1
	jmp	compare
porFP:
	mov	byte[PFP], 2
	jmp	compare
divisionFP:
	mov	byte[PFP], 2
	jmp	compare
powFP:
	mov	byte[PFP], 3
	jmp	compare

compare:
	push	EAX
	mov	AL, byte[PFP]	
	cmp	byte[PDP], AL
	pop	EAX
	jge	cambiar
	jmp	meter
cambiar:
	mov	byte[pilaPosfijo+EDX], %1
	mov	AL, %2
	push	EAX
	jmp	SALIR_prioridades

meter:
	push	EAX
	mov	AL, %2
	push EAX
	jmp	SALIR_prioridades

ERROR_prioridades:

SALIR_prioridades:
	
%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------
%macro	powDosASCII 1

	pushfd	;Conservar el estado de todos los registros de 32bits
	

	mov	BH, %1
	
	cmp	BH, 0
	je	pow_cero
	cmp	BH, 1
	je	pow_uno

vaciar_potencia:
	mov	ECX, 0
vaciar_potencia_2:
	
	
	mov	byte[potencia+ECX],  '0'
	mov	byte[ocho1+ECX], '0'
	mov	byte[ocho2+ECX], '0'


	inc	CX
	cmp	CX, 10
	je	salir_vaciar_potencia
	jmp	vaciar_potencia_2
salir_vaciar_potencia:
	mov	byte[ocho1+9], '2'
	mov	byte[ocho2+9], '2'

sum_loop_1:
	mov	BL, 2
sum_loop:
	mov	ESI, 9
	mov	ECX, 10
	clc
add_loop:
	mov	AL, [ocho1+ESI]
	adc	AL, [ocho2+ESI]
	aaa
	pushf
	or	AL, 30h
	popf
	mov	[potencia+ESI], AL
	dec	ESI
	loop	add_loop
	;mov	[potencia+ESI], 
	;PutStr	sum_msg
	;PutStr	potencia
	;nwln
	

	cmp	BL, 2
	je	Repetir
	dec	BL
	
	
;nwln
	mov	ECX, 0
	push	EDX
mover_operando:
	
	
	
	mov	DL, byte[potencia+ECX]
	mov	byte[potencia+ECX],  '0'
	;PutCh	DL
	;nwln
	mov	byte[ocho1+ECX], DL
	;sub	[potencia], ECX
	
	;PutStr	number1
	;nwln
	inc	CX
	cmp	CX, 10
	je	salir_mover_operandos
	jmp	mover_operando

salir_mover_operandos:
	pop 	EDX
	jmp	sum_loop




	
Repetir:
	
	cmp	BH, 2
	je	SALIR_pow
	dec	BH
	mov	ECX, 0
	push	EDX
mover_operandos_2:

	
	mov	DL, byte[potencia+ECX]
	mov	byte[potencia+ECX],  '0'
	mov	byte[ocho1+ECX], DL
	mov	byte[ocho2+ECX], DL

	;PutStr	ocho1
	;nwln
	;PutStr	ocho2

	inc	CX
	cmp	CX, 10
	je	salir_mover_operandos_2
	jmp	mover_operandos_2

salir_mover_operandos_2:
	pop EDX
	jmp	sum_loop_1


pow_cero:
	mov	byte[potencia + 9], '1'
	jmp SALIR_pow

pow_uno:
	mov	ECX, 0
	;push	EDX
pow_uno_1:
	
	;mov	DL, byte[potencia+ECX]
	mov	byte[potencia+ECX],  '0'
	;mov	byte[ocho1+ECX], DL
	;mov	byte[ocho2+ECX], DL


	inc	CX
	cmp	CX, 10
	je	salir_pow_uno
	jmp	pow_uno_1

salir_pow_uno:
	;pop EDX
	;PutStr	sum_msg
	mov	byte[potencia + 9], '2'
	

SALIR_pow:
	popfd
%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------

%macro	posfijo 0
	mov	EBX, 0		;Desplazamiento para recorrer el string
	mov	byte[pilaPosfijo], '#'	
	mov	CX, 264	
	mov	EAX, 0
	mov	AL, '#'
	push	EAX	;Pila vacia
	mov	EDX, 0		;Contador para la pila posfijo
	
	;GetStr	operation
	
reading:
	cmp	byte[operation + EBX], 0	;SALTA SI LELGA AL FINAL DE STRING
	je	SALIR_posfijo
	
	cmp	byte[operation + EBX], 'b'	;Si es binario
	je	bin_num

	cmp	byte[operation + EBX], 'h'	;Si es hexadecimal
	je	hex_num

	cmp	byte[operation + EBX], 'o'	;Si es octal
	je	oct_num

	cmp	byte[operation + EBX], '0'	;Si es decimal
	jge	dec_num
	
	pop	EAX
	cmp	EAX, '#'			;Si la pila esta vacia
	je	pila_vacia
	push	EAX	
	
	cmp	byte[operation + EBX], ')'			;Si se encuentra un parentesis de cierre
	je	vaciar_pila

	pop	EAX
	prioridades AL, byte[operation + EBX] ;Compara prioridades DENTRO DE LA PILA (%1) y FUERA DE LA PILA (%2)
	inc	EBX

loop1:
	;loop	reading
	dec	ECX
	jnz	reading
	jmp	SALIR_posfijo


;-------------------------------------------------
bin_num:
	cmp	byte[operation + EBX], 'b'
	je	b

	cmp	byte[operation + EBX], '0'
	je	Cero_posfijo
	
	cmp	byte[operation + EBX], '1'
	je	Uno_posfijo
	jg	ERROR

	jmp	loop1
b:
	mov	byte[pilaPosfijo+EDX], 'b'
	inc	EBX
	inc 	EDX
	jmp	bin_num

Cero_posfijo:	
	mov	byte[pilaPosfijo+EDX], '0'
	inc	EBX
	inc 	EDX
	jmp	bin_num
Uno_posfijo:	
	mov	byte[pilaPosfijo+EDX], '1'
	inc	EBX
	inc 	EDX
	jmp	bin_num	

;-------------------------------------------------
hex_num:
	cmp	byte[operation + EBX], 'h'
	je	h
	
	cmp	byte[operation + EBX], '0'
	jge	Cero_F

	jmp	loop1
	
h:
	mov	byte[pilaPosfijo+EDX], 'h'
	inc	EBX
	inc 	EDX
	jmp	hex_num

	
Cero_F:
	cmp	byte[operation + EBX], 'F'
	jg	ERROR
	
	push	EAX
	mov	AL, byte[operation + EBX]
	mov	byte[pilaPosfijo+EDX], AL
	pop 	EAX
	inc	EBX
	inc 	EDX
	jmp	hex_num


;-------------------------------------------------	
oct_num:
	cmp	byte[operation + EBX], 'o'
	je	o
	
	cmp	byte[operation + EBX], '0'
	jge	Cero_siete

	jmp	loop1
	
o:
	mov	byte[pilaPosfijo+EDX], 'o'
	inc	EBX
	inc 	EDX
	jmp	oct_num

	
Cero_siete:
	cmp	byte[operation + EBX], '7'
	jg	ERROR
	
	push	EAX
	mov	AL, byte[operation + EBX]
	mov	byte[pilaPosfijo+EDX], AL
	pop 	EAX
	inc	EBX
	inc 	EDX
	jmp	oct_num

;-------------------------------------------------
dec_num:
	mov	byte[pilaPosfijo+EDX], 'd'
	;inc	EBX
	inc 	EDX

dec_num2:

	cmp	byte[operation + EBX], '0'
	jge	Cero_nueve

	jmp	loop1
	
	
Cero_nueve:
	cmp	byte[operation + EBX], '9'
	jg	ERROR
	
	push	EAX
	mov	AL, byte[operation + EBX]
	mov	byte[pilaPosfijo+EDX], AL
	pop 	EAX
	inc	EBX
	inc 	EDX
	jmp	dec_num2		
;-------------------------------------------------

pila_vacia:
	push	EAX
	mov	AL, byte[operation + EBX]
	push	EAX
	inc	EBX
	jmp	loop1

;-------------------------------------------------

vaciar_pila:
	pop	EAX
	;nwln
	cmp	AL, '('
	je	vaciar_pila_salir
	
	mov	byte[pilaPosfijo + EDX], AL
	inc	EDX
	jmp	vaciar_pila
vaciar_pila_salir:	
	inc	EBX
	jmp	loop1
;-------------------------------------------------

ERROR:
	PutStr	error_msg
	nwln
	.EXIT
	


SALIR_posfijo:	
	
	pop	EAX
	PutCh	AL
	nwln
	cmp	AL, '#'
	je	SALIR_posfijo_2
	
	mov	byte[pilaPosfijo + EDX], AL
	inc	EDX
	jmp	SALIR_posfijo

SALIR_posfijo_2:	
	inc	EBX
	

	PutStr pilaPosfijo
	nwln

%endmacro


;;----------------------------------------------------------------
;;----------------------------------------------------------------


%macro	b_d	1
	;pushfd	;Conservar el estado de todos los registros de 32bits
	PutStr	%1
	
	mov	ECX, 0
%%reset:
	;mov	byte[potencia+ECX],  '0'
	mov	byte[potencia+ECX], '0'
	mov	byte[total+ECX], '0'
	mov	byte[sum+ECX], ' '

	inc	CX
	cmp	CX, 10
	je	%%salir_reset
	jmp	%%reset

%%salir_reset:
	mov	dword[final], 0
	mov	dword[contador], 0
	mov	EBX, 0
	;mov	ECX, 0
	
%%cont:					;Posicionarse en el ultimo digito del string
	cmp	byte[%1+EBX], 0
	je	%%preconvertir
	inc	EBX
	add	dword[final], 1	
	jmp	%%cont
%%preconvertir:
	sub	dword[final], 2
	mov	dword[cont_op], EBX
%%convertir:

	sub	dword[cont_op], 1
	
		
	sub	AL, AL
	mov	EBX, dword[cont_op]
	mov	AL, byte[%1+EBX]
	;mov	byte[%1+EBX], '0' 
	mov	byte[number1 + 9], AL 
	
	;PutLInt	dword[contador]	
	;nwln
	powDosASCII byte[contador]


	;nwln
	stringToInt potencia
;nwln
	mulASCII number1, EAX
	addASCII total, sum
	
	
	mov	EAX, dword[final]
		
	cmp	byte[contador], AL
	
	je	%%SALIR_oct
	
	add 	byte[contador], 1
	
	
	
	jmp	%%convertir
		
	
	;popfd	
	;nwln
%%SALIR_oct:
	
	;PutStr	total
	stringToInt	total
	nwln
	;PutLInt EAX

	
%endmacro

;;----------------------------------------------------------------
;;----------------------------------------------------------------



%macro	o_d	1
	PutStr	%1
	nwln
	mov	ECX, 0
%%reset_oct:
	;mov	byte[potencia+ECX],  '0'
	mov	byte[potencia+ECX], '0'
	mov	byte[total+ECX], '0'
	mov	byte[sum+ECX], ' '

	inc	CX
	cmp	CX, 10
	je	%%salir_reset_oct
	jmp	%%reset_oct

%%salir_reset_oct:
	mov	dword[final], 0
	mov	dword[contador], 0
	mov	EBX, 0
	;mov	ECX, 0

	mov	EBX, 0
	;mov	ECX, 0
cont:					;Posicionarse en el ultimo digito del string
	cmp	byte[%1+EBX], 0
	je	preconvertir
	inc	EBX
	add	dword[final], 1	
	jmp	cont
preconvertir:
	sub	dword[final], 2
	mov	dword[cont_op], EBX
convertir:
	;dec	EBX
	sub	dword[cont_op], 1
	;PutStr	msg_ayuda
	;PutStr	number1
	;PutLInt	EBX
	;nwln
		
	sub	AL, AL
	mov	EBX, dword[cont_op]
	mov	AL, byte[%1+EBX]
	mov	byte[number1 + 9], AL 
	
	;PutStr	msg_ayuda
	;PutStr	number1
	
	
	powOchoASCII byte[contador]

	
	
	stringToInt potencia
	;PutLInt	EAX
nwln
	mulASCII number1, EAX
	
	addASCII total, sum
	
	
	mov	EAX, dword[final]
		
	cmp	byte[contador], AL
	
	je	SALIR_oct
	
	add 	byte[contador], 1
	
	
	
	jmp	convertir
		
	
	;popfd	;PutStr	sum
	nwln
SALIR_oct:
	
	;PutStr	total
	
	stringToInt	total
	;PutLInt	EAX
	;nwln
	
%endmacro


;;----------------------------------------------------------------
;;----------------------------------------------------------------



%macro	evaluar	0

	mov	EBX, 0		;Desplazamiento para recorrer el string
	;mov	byte[pilaPosfijo], '#'	
	mov	CX, 264	
	mov	EAX, 0
	mov	AL, '#'
	push	EAX	;Pila vacia
	mov	EDX, 0		;Contador para la pila posfijo
	
	;GetStr	operation
	
reading_e:
	
	cmp	byte[pilaPosfijo + EBX], 0	;SALTA SI LELGA AL FINAL DE STRING
	je	SALIR_posfijo_2_e
	
	cmp	byte[pilaPosfijo + EBX], 'b'	;Si es binario
	je	bin_num_e
	
	;cmp	byte[pilaPosfijo + EBX], 'h'	;Si es hexadecimal
	;je	hex_num_e

	cmp	byte[pilaPosfijo + EBX], 'o'	;Si es octal
	je	oct_num_e

	;cmp	byte[pilaPosfijo + EBX], '0'	;Si es decimal
	;jge	dec_num_e

	cmp	byte[pilaPosfijo + EBX], '+'	;Si es decimal
	je	op_sumar_e
	
	cmp	byte[pilaPosfijo + EBX], '-'	;Si es decimal
	je	op_restar_e
	
	


loop1_e:
	;loop	reading
	;mov	EDX, 0
	dec	ECX
		
	jnz	reading_e
	jmp	SALIR_posfijo_e


;-------------------------------------------------
bin_num_e:
	mov	EDX, 0
	mov	byte[operando+EDX], 'b'
	inc	EBX
	inc 	EDX
	
b_e:	
	cmp	byte[pilaPosfijo + EBX], '0'
	je	Cero_e
	
	cmp	byte[pilaPosfijo + EBX], '1'
	je	Uno_e
	
	
	push	EBX
	push	ECX
	
	;PutStr	operando
	b_d	operando
	
	pop 	ECX
	pop	EBX
	
	push	EAX 		;METE EL NUMERO EN ENTERO A LA PILA
	sub	EDX, EDX
	;jmp	SALIR_posfijo_2
	jmp	borrar_operando


Cero_e:	
	mov	byte[operando+EDX], '0'
	inc	EBX
	inc 	EDX
	jmp	b_e
Uno_e:	
	mov	byte[operando+EDX], '1'
	inc	EBX
	inc 	EDX
	jmp	b_e	

;-------------------------------------------------
hex_num_e:
	cmp	byte[pilaPosfijo + EBX], 'h'
	je	h_e
	
	cmp	byte[pilaPosfijo + EBX], '0'
	jge	Cero_F_e

	jmp	loop1_e
	
h_e:
	mov	byte[pilaPosfijo+EDX], 'h'
	inc	EBX
	inc 	EDX
	jmp	hex_num_e

	
Cero_F_e:
	cmp	byte[operation + EBX], 'F'
	;jg	ERROR_e
	
	push	EAX
	mov	AL, byte[operation + EBX]
	mov	byte[pilaPosfijo+EDX], AL
	pop 	EAX
	inc	EBX
	inc 	EDX
	jmp	hex_num_e


;-------------------------------------------------	
oct_num_e:
	mov	EDX, 0
	mov	byte[operando+EDX], 'o'
	inc	EBX
	inc 	EDX
o_e:
	
	cmp	byte[pilaPosfijo + EBX], '0'
	jge	Cero_siete_e
	jmp	Next

	
Cero_siete_e:
	cmp	byte[pilaPosfijo + EBX], '7'
	jg	Next
	
	push	EAX
	mov	AL, byte[pilaPosfijo + EBX]
	mov	byte[operando+EDX], AL
	pop 	EAX
	inc	EBX
	inc 	EDX
	jmp	o_e
Next:
	push	EBX
	push	ECX
	
	o_d	operando
	
	pop 	ECX
	pop	EBX
	
	push	EAX 		;METE EL NUMERO EN ENTERO A LA PILA
	sub	EDX, EDX
	
	jmp	borrar_operando

;-------------------------------------------------
dec_num_e:
	mov	byte[pilaPosfijo+EDX], 'd'
	;inc	EBX
	inc 	EDX

dec_num2_e:

	cmp	byte[operation + EBX], '0'
	jge	Cero_nueve_e

	jmp	loop1_e
	
	
Cero_nueve_e:
	cmp	byte[operation + EBX], '9'
	;jg	ERROR_e
	
	push	EAX
	mov	AL, byte[operation + EBX]
	mov	byte[pilaPosfijo+EDX], AL
	pop 	EAX
	inc	EBX
	inc 	EDX
	jmp	dec_num2_e		
;-------------------------------------------------


SALIR_posfijo_e:	
	
	pop	EAX
	PutCh	AL
	nwln
	cmp	AL, '#'
	je	SALIR_posfijo_2_e
	
	mov	byte[pilaPosfijo + EDX], AL
	inc	EDX
	jmp	SALIR_posfijo_e



;-------------------------------------------------
op_sumar_e:
	pop	EAX
	mov	dword[segundo_operando], EAX
	pop	EAX
	mov	dword[primer_operando], EAX
	
	push	EDX
	mov	EDX, dword[segundo_operando]
	mov	EAX, dword[primer_operando]
	add	EAX, EDX
	;PutLInt	EAX
	pop	EDX
	push	EAX
	inc	EBX
	jmp	loop1_e
	


op_restar_e:
	pop	EAX
	mov	dword[segundo_operando], EAX
	pop	EAX
	mov	dword[primer_operando], EAX
	
	push	EDX
	mov	EDX, dword[segundo_operando]
	mov	EAX, dword[primer_operando]
	sub	EAX, EDX
	;PutLInt	EAX
	pop	EDX
	push	EAX
	jmp	loop1_e




borrar_operando:
	mov	EDX, 0
borrar_operando_2:
	cmp	byte[operando + EDX], 0
	je	loop1_e
	mov	byte[operando + EDX], 0
	inc	EDX
	
	jmp	borrar_operando_2

SALIR_posfijo_2_e:	
	inc	EBX
	
	pop	EAX
	PutStr 	resul
	PutLInt	EAX
	nwln
	
%endmacro
